stages:
- stage: LocalizeStrings
  displayName: Call TDBuild to Localize Resources
  jobs:
  - job: Localize
    pool: 
      vmImage: windows-2019
    timeoutInMinutes: 90
    steps:
    - checkout: self
      clean: true
      persistCredentials: true

    # This is needed to avoid credentials errors for later in the TDBuild Task
    - script: |
        git config --global user.email "DoNotEmailThis@dev.null.microsoft.com"
        git config --global user.name "TDBuild"

    # Download x64
    - task: DownloadBuildArtifacts@0
      displayName: Download x64
      inputs:
        artifactName: release_x64
        itemPattern: ''
        downloadPath: $(Build.SourcesDirectory)
        extractTars: false

    # Download RESX
    - task: DownloadBuildArtifacts@0
      displayName: Download ResX
      inputs:
        artifactName: ResX
        itemPattern: ''
        downloadPath: $(Build.SourcesDirectory)
        extractTars: false

    # Run TouchdownBuild
  #  - task: TouchdownBuildTask@1
  #    inputs:
  #      environment: 'PRODEXT'
  #      teamId: $(CsWinRTTDBuildTeamID)
  #      authType: 'OAuth'
  #      authId: $(CsWinRTTDBuildAuthID)
  #      authKey: $(CsWinRTTDBuildAuthKey)
  #      localizationTarget: true
  #      isPreview: false
  #      resourceFilePath: |
  #        $(Build.SourcesDirectory)\release_x64\WinRT.Host.dll.mui
  #        $(Build.SourcesDirectory)\ResX\WinRT.SourceGenerator\CsWinRTDiagnosticStrings.resx
  #        $(Build.SourcesDirectory)\ResX\WinRT.Runtime\WinRTRuntimeErrorStrings.resx
  #      outputDirectoryRoot: $(LocOutputDir) 
  #      appendRelativeDir: true
  #      cultureMappingType: 'None'
  #      gitAction: NONE 

    # Stage TDBuild Output
    - task: CopyFiles@2
      displayName: Stage TDBuild Output
      condition: succeeded()
      inputs:
        SourceFolder: $(LocOutputDir)
        TargetFolder: $(Build.ArtificatStagingDirectory)\loc

    # Copy TDBuild Output for WinRT.Host
    - task: CopyFiles@2
      displayName: Copy Localized Resources for WinRT.Host
      condition: succeeded()
      inputs:
        # SourceFolder: $(Build.ArtificatStagingDirectory)\loc\release_x64
        SourceFolder: $(Build.SourcesDirectory)\release_x64
        TargetFolder: $(Build.SourcesDirectory)src\Authoring\WinRT.Host\LocalizedMUI

    # Copy TDBuild Output for WinRT.Runtime
    - task: CopyFiles@2
      displayName: Copy Localized Resources for WinRT.Runtime
      condition: succeeded()
      inputs:
        SourceFolder: $(Build.ArtificatStagingDirectory)\loc\ResX\WinRT.Runtime
        TargetFolder: $(Build.SourcesDirectory)src\WinRT.Runtime\LocalizedResX

    # Copy TDBuild Output for WinRT.Runtime
    - task: CopyFiles@2
      displayName: Copy Localized Resources for WinRT.SourceGenerator
      condition: succeeded()
      inputs:
        # SourceFolder: $(Build.ArtificatStagingDirectory)\loc\ResX\WinRT.SourceGenerator
        SourceFolder: $(Build.SourcesDirectory)\ResX\WinRT.SourceGenerator
        TargetFolder: $(Build.SourcesDirectory)src\Authoring\WinRT.SourceGenerator\LocalizedResX

    # Publish TDBuild Output
  #  - task: PublishBuildArtifacts@1
  #    displayName: Publish TDBuild Output
  #    condition: succeeded()
  #    inputs:
  #      PathtoPublish: $(Build.ArtificatStagingDirectory)\loc
  #      ArtifactName: TDBuildLoc

    # Create pull request with new mui files
    - task: PowerShell@2
      inputs:
        filePath: '$(Build.SourcesDirectory)\build\scripts\updateLocalizedResources.ps1'